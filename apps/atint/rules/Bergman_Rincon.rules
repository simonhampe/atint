########################################################################
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.
#  
#  ---
#  Copyright (C) 2011, Simon Hampe <hampe@mathematik.uni-kl.de>
#
#  This file contains the perl side wrappers for the bergman fan algorithms
#  by Felipe Rinc贸n. 
########################################################################

CREDIT bergman
  Algorithms for computation of bergman fans taken from the program "bergman" by
  Felipe Rinc贸n
  http://math.berkeley.edu/~felipe/bergman
  
# @category Tropical geometry
# Uses an algorithm by Felipe Rinc贸n to compute the bergman fan of a linear matroid
# @param Matrix<Rational> m Any rational matrix
# @param Bool modOutLineality Optional argument. If set to TRUE, the lineality space is divided out before returning the 
# fan. The next parameter specifies the exact modalities of the division. By default, this parameter is set to FALSE
# @param int projectionCoordinate Optional argument. An integer in {0,..,n-1}, where n is the number of elements of the matroid. If modOutLineality is set to TRUE, the standard basis vector with index projectionCoordinate is mapped to minus the sum of the remaining standard basis vectors to mod out the lineality space. By default, this is the last coordinate n-1.
# @return The bergman fan of the given matroid in non-homog. coordinates
user_function bergman_fan_linear {
  my ($matrix, $modOutLineality, $projectionCoordinate) = @_;
  
  #Set default values if necessary
  $modOutLineality = FALSE unless defined($modOutLineality);
  $projectionCoordinate = $matrix->cols() -1 unless defined($projectionCoordinate);
  
  return prepareBergmanMatrix($matrix, ($modOutLineality eq TRUE || $modOutLineality == 1)? 1 : 0, $projectionCoordinate);
}

# @category Tropical geometry
# Uses an algorithm by Felipe Rinc贸n to compute the bergman fan of a general matroid
# @param matroid::Matroid m Any matroid
# @param Bool modOutLineality Optional argument. If set to TRUE, the lineality space is divided out before returning the 
# fan. The next parameter specifies the exact modalities of the division. By default, this parameter is set to FALSE
# @param int projectionCoordinate Optional argument. An integer in {0,..,n-1}, where n is the number of elements of the matroid. If modOutLineality is set to TRUE, the standard basis vector with index projectionCoordinate is mapped to minus the sum of the remaining standard basis vectors to mod out the lineality space. By default, this is the last coordinate n-1.
# @return The bergman fan of the given matroid in non-homog. coordinates
user_function bergman_fan_matroid {
  my ($matroid, $modOutLineality,$projectionCoordinate) = @_;
  
  #Set default values if necessary
  $modOutLineality = FALSE unless defined($modOutLineality);
  $projectionCoordinate = $matroid->N_ELEMENTS -1 unless defined($projectionCoordinate);
  
    return prepareBergmanMatroid($matroid->N_ELEMENTS,new IncidenceMatrix($matroid->BASES), ($modOutLineality eq TRUE || $modOutLineality == 1)? 1 : 0, $projectionCoordinate);
}

