########################################################################
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.
#  
#  ---
#  Copyright (C) 2011, Simon Hampe <hampe@mathematik.uni-kl.de>
#
# This file contains the description of the type RationalFunction
########################################################################

object RationalFunction {
  
  # @category Tropical geometry
  # This property describes the linearity domains of the function. I.e. the function is
  # affine integral linear on each maximal cone of [[DOMAIN]]. It is of type WeightedComplex, but
  # actually only the basic geometric properties [[RAYS]]/[[CMPLX_RAYS]],[[MAXIMAL_CONES]]/[[CMPLX_MAXIMAL_CONES]],[[LINEALITY_SPACE]] and [[USES_HOMOGENEOUS_C]] are of any interest. Further properties are ignored and can be omitted upon generation.
  property DOMAIN : WeightedComplex;
  
  # @category Tropical geometry
  # The value at index i describes the function value of ray [[DOMAIN]]->CMPLX_RAYS->row(i). More precisely, if the
  # corresponding ray is a vertex, it describes its function value. If it is a directional ray, it describes 
  # the slope on that ray.
  property RAY_VALUES : Vector<Rational>;
  
  # @category Tropical geometry
  # The value at index i describes the function value of [[DOMAIN]]->LINEALITY_SPACE->row(i)
  property LIN_VALUES : Vector<Rational>; 
}

# @category Rational functions
# This function takes a fan::PolyhedralFan and converts it into a WeightedComplex object.
# @param fan::PolyhedralFan fan The fan to be converted
# @param Bool homog Whether the fan is to be interpreted in homogeneous coordinates
# @return WeightedComplex A complex with no weights but with the same geometry as fan.
user_function wfan {
  my ($fan,$homog) = @_;
  return new WeightedComplex(RAYS=>$fan->RAYS,MAXIMAL_CONES=>$fan->MAXIMAL_CONES,LINEALITY_SPACE=>$fan->LINEALITY_SPACE, USES_HOMOGENEOUS_C=>$homog);
}