########################################################################
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.
#  
#  ---
#  Copyright (C) 2011, Simon Hampe <hampe@mathematik.uni-kl.de>
#
#  This file provides functions for basic polyhedral operations, like taking the
#  k-skeleton of a complex or computing the cartesian product of two varieties
########################################################################

# @category Basic polyhedral operations
# Takes a polyhedral complex and computes the k-skeleton. Will return an empty fan, if k is larger then the dimension of the given complex or smaller than 0.
# @param WeightedComplex fan A fan (or polyhedral complex)
# @param Int k The dimension of the skeleton that should be computed
# @param Bool preserveRays When true, the function assumes that all rays of the fan remain in the k-skeleton, so it just copies the RAYS, instead of computing an irredundant list. This property can always be set to true, if fan is not in homogeneous coordinates or if the corresponding complex at x0 = 1 only has vertices. By default, this property is false.
# @return The k-skeleton of the fan (or complex, if USES_HOMOGENEOUS_C is true)
user_function skeleton_complex {
  my ($fan, $k, $preserve) = @_;
  
  $preserve = FALSE unless defined($preserve);
  
  return calculate_skeleton_complex($fan,$k, $preserve eq TRUE? 1 : 0);
}

# @category Basic polyhedral operations
# Computes the cartesian product of a set of polyhedral fans. If any of them uses homogeneous coordinates, so will the result
# @param complexes A list of WeightedComplex objects
# @return the cartesian product of the complexes. If any of the complexes use homogeneous coordinates, so does the result. If any of the complexex carries weights, the result carries the sum of the weights of its factors (Complexes without weights are treated as complexes with weight 1). If you want to compute the properties [[LATTICE_BASES]] and [[LATTICE_GENERATORS]] as cartesian products of the corr. properties of the complexes, use product_complex_lattice instead.
user_function product_complex {
  return compute_product_complex(@_);
}

# @category Basic polyhedral operations
# Computes the cartesian product of a set of polyhedral fans. If any of them uses homogeneous coordinates, so will the result
# @param complexes A list of WeightedComplex objects
# @return the cartesian product of the complexes. If any of the complexes use homogeneous coordinates, so does the result. If any of the complexex carries weights, the result carries the sum of the weights of its factors (Complexes without weights are treated as complexes with weight 1). This function will precompute the properties [[LATTICE_BASES]] and [[LATTICE_GENERATORS]] for  all complexes and the result will have the corr. properties set to the cartesian product of these
user_function product_complex_lattice {
  return compute_product_complex_lattice(@_);
}

