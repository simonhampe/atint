# This script is used to load diagonal functions
use application "common";
use application "atint";

use Switch;

my ($type, @args) = @_;

# Help statement
my $help_statement = 
"Called diagonal function script. \nUsage: \n".
"script(\"atint_diagonals\", \"type\",arg_1,arg2,...)\n".
"\"type\" describes the type of diagonal functions you want:\n1) \"lnk\" for L^n_k (will return the diagonals of U_(n+1),(k+1)): Needs further arguments arg1 = n, arg2 = k\n2) \"unk\" for the bergman fan of U_n,k. Needs further arguments arg1 = n, arg2 = k\n".
"arg1,arg2,...: List of arguments dependent on the type of diagonal\n";

if(!defined($type)) {
  print $help_statement;
  return;
}

script("tarballs");

#Go through all application directories, find the one containing a 
# subdirectory "objectlibrary"
my $type_found = 0;
for my $f (@lookup_applications) {
  if(-d $f."/objectlibrary") {
    #Go through the different types
    if($type =~ /[ul]nk/i) {
      $type_found = 1;
      my ($n,$k) = ($args[0],$args[1]);
      if($type =~ /lnk/i) { $n++; $k++;}
      my $filename = "diag\_u\_".$n."\_".$k.".tar.gz";
      my @diag = ();
      @diag = eval {
	unpack_tarball($f."/objectlibrary/".$filename);
      };
      if($@) {
	print "Diagonal file not found. Creating from scratch...\n";
	@diag = atint::diagonal_unk($n,$k);
	print "Trying to save...\n";
	eval {
	  pack_tarball($f."/objectlibrary/".$filename,@diag);
	};
      }
      return @diag;
    }
    if($type =~ /unk/i) {
      $type_found = 1;
      my ($n,$k) = ($args[0],$args[1]);
      $filename = "diag\_u\_$n\_$k.tar.gz";
    }
    #If we arrive here, we didn't find a matching type
    if(!$type_found) { die "Type $type unknown.";}
  
  }
  
}
#If we arrive here, we could not find the object library
die "Could not find object library";
