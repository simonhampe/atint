Matroid on complete graph on n vertices:
n = 3:
Combinatorial:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
Original alg.: 0 wallclock secs ( 0.11 usr +  0.00 sys =  0.11 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 4:  
Combinatorial: 0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
Original alg.: 0 wallclock secs ( 0.14 usr +  0.00 sys =  0.14 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 5:  
Combinatorial: 0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
Original alg.: 4 wallclock secs ( 3.50 usr +  0.00 sys =  3.50 CPU)
TropLi:  0 wallclock secs ( 0.06 usr +  0.00 sys =  0.06 CPU)
n = 6:  
Combinatorial: 0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)
Original alg.: ~ 3 hrs
TropLi: 11 wallclock secs (10.77 usr +  0.00 sys = 10.77 CPU)
n = 7:  
Combinatorial: 1 wallclock secs ( 0.96 usr +  0.00 sys =  0.96 CPU)
Original alg.: Too long to wait... ;-)
TropLi: 3049 wallclock secs (3044.79 usr +  0.00 sys = 3044.79 CPU)
------------------------------------------------------------------------------

Uniform matroid U_k,n:
n = 3, k = 2:
Original algorithm:  0 wallclock secs ( 0.10 usr +  0.01 sys =  0.11 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 4, k = 2:
Original algorithm:  0 wallclock secs ( 0.10 usr +  0.00 sys =  0.10 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 4, k = 3:
Original algorithm:  0 wallclock secs ( 0.11 usr +  0.00 sys =  0.11 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 5, k = 2:
Original algorithm:  0 wallclock secs ( 0.11 usr +  0.00 sys =  0.11 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 5, k = 3:
Original algorithm:  0 wallclock secs ( 0.12 usr +  0.00 sys =  0.12 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 5, k = 4:
Original algorithm:  0 wallclock secs ( 0.12 usr +  0.00 sys =  0.12 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 6, k = 2:
Original algorithm:  1 wallclock secs ( 0.10 usr +  0.00 sys =  0.10 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 6, k = 3:
Original algorithm:  0 wallclock secs ( 0.13 usr +  0.00 sys =  0.13 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 6, k = 4:
Original algorithm:  0 wallclock secs ( 0.18 usr +  0.00 sys =  0.18 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 6, k = 5:
Original algorithm:  0 wallclock secs ( 0.15 usr +  0.00 sys =  0.15 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 7, k = 2:
Original algorithm:  0 wallclock secs ( 0.11 usr +  0.00 sys =  0.11 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 7, k = 3:
Original algorithm:  0 wallclock secs ( 0.16 usr +  0.00 sys =  0.16 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 7, k = 4:
Original algorithm:  1 wallclock secs ( 0.26 usr +  0.00 sys =  0.26 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 7, k = 5:
Original algorithm:  0 wallclock secs ( 0.27 usr +  0.00 sys =  0.27 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 7, k = 6:
Original algorithm:  0 wallclock secs ( 0.18 usr +  0.00 sys =  0.18 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 8, k = 2:
Original algorithm:  0 wallclock secs ( 0.12 usr +  0.00 sys =  0.12 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 8, k = 3:
Original algorithm:  0 wallclock secs ( 0.22 usr +  0.00 sys =  0.22 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 8, k = 4:
Original algorithm:  1 wallclock secs ( 0.54 usr +  0.00 sys =  0.54 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 8, k = 5:
Original algorithm:  1 wallclock secs ( 0.83 usr +  0.00 sys =  0.83 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 8, k = 6:
Original algorithm:  0 wallclock secs ( 0.61 usr +  0.00 sys =  0.61 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 8, k = 7:
Original algorithm:  1 wallclock secs ( 0.27 usr +  0.00 sys =  0.27 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 9, k = 2:
Original algorithm:  0 wallclock secs ( 0.12 usr +  0.00 sys =  0.12 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 9, k = 3:
Original algorithm:  0 wallclock secs ( 0.37 usr +  0.00 sys =  0.37 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 9, k = 4:
Original algorithm:  2 wallclock secs ( 1.46 usr +  0.00 sys =  1.46 CPU)
TropLi:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)
n = 9, k = 5:
Original algorithm:  3 wallclock secs ( 3.69 usr +  0.00 sys =  3.69 CPU)
TropLi:  0 wallclock secs ( 0.03 usr +  0.00 sys =  0.03 CPU)
n = 9, k = 6:
Original algorithm:  4 wallclock secs ( 3.57 usr +  0.00 sys =  3.57 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 9, k = 7:
Original algorithm:  2 wallclock secs ( 1.68 usr +  0.00 sys =  1.68 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 9, k = 8:
Original algorithm:  0 wallclock secs ( 0.43 usr +  0.00 sys =  0.43 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 10, k = 2:
Original algorithm:  0 wallclock secs ( 0.13 usr +  0.00 sys =  0.13 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 10, k = 3:
Original algorithm:  1 wallclock secs ( 0.68 usr +  0.00 sys =  0.68 CPU)
TropLi:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)
n = 10, k = 4:
Original algorithm:  4 wallclock secs ( 4.44 usr +  0.00 sys =  4.44 CPU)
TropLi:  0 wallclock secs ( 0.06 usr +  0.00 sys =  0.06 CPU)
n = 10, k = 5:
Original algorithm: 12 wallclock secs (11.86 usr +  0.03 sys = 11.89 CPU)
TropLi:  0 wallclock secs ( 0.09 usr +  0.00 sys =  0.09 CPU)
n = 10, k = 6:
Original algorithm: 21 wallclock secs (20.50 usr +  0.04 sys = 20.54 CPU)
TropLi:  0 wallclock secs ( 0.07 usr +  0.00 sys =  0.07 CPU)
n = 10, k = 7:
Original algorithm: 15 wallclock secs (15.47 usr +  0.00 sys = 15.47 CPU)
TropLi:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)
n = 10, k = 8:
Original algorithm:  4 wallclock secs ( 4.85 usr +  0.00 sys =  4.85 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 10, k = 9:
Original algorithm:  1 wallclock secs ( 0.83 usr +  0.00 sys =  0.83 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 11, k = 2:
Original algorithm:  0 wallclock secs ( 0.14 usr +  0.00 sys =  0.14 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)
n = 11, k = 3:
Original algorithm:  1 wallclock secs ( 1.13 usr +  0.00 sys =  1.13 CPU)
TropLi:  1 wallclock secs ( 0.03 usr +  0.00 sys =  0.03 CPU)
n = 11, k = 4:
Original algorithm: 10 wallclock secs (10.74 usr +  0.00 sys = 10.74 CPU)
TropLi:  0 wallclock secs ( 0.16 usr +  0.00 sys =  0.16 CPU)
n = 11, k = 5:
Original algorithm: 42 wallclock secs (41.04 usr +  0.00 sys = 41.04 CPU)
TropLi:  0 wallclock secs ( 0.32 usr +  0.00 sys =  0.32 CPU)
n = 11, k = 6:
Original algorithm: 94 wallclock secs (93.09 usr +  0.51 sys = 93.60 CPU)
TropLi:  0 wallclock secs ( 0.32 usr +  0.00 sys =  0.32 CPU)
n = 11, k = 7:
Original algorithm: 134 wallclock secs (133.56 usr +  0.36 sys = 133.92 CPU)
TropLi:  0 wallclock secs ( 0.18 usr +  0.00 sys =  0.18 CPU)
n = 11, k = 8:
Original algorithm: 73 wallclock secs (72.59 usr +  0.00 sys = 72.59 CPU)
TropLi:  0 wallclock secs ( 0.05 usr +  0.00 sys =  0.05 CPU)
n = 11, k = 9:
Original algorithm: 15 wallclock secs (15.25 usr +  0.00 sys = 15.25 CPU)
TropLi:  0 wallclock secs ( 0.01 usr +  0.00 sys =  0.01 CPU)
n = 11, k = 10:
Original algorithm:  2 wallclock secs ( 1.82 usr +  0.00 sys =  1.82 CPU)
TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)


-------------------------------------------------------------------------------------------

Computing examples from paper:
Computing for matrix 
1 1 1 1 1 1 1 1
-1 1 -1 1 -1 1 -1 1
-1 -1 1 1 -1 -1 1 1
-1 -1 -1 -1 1 1 1 1

TropLi:  0 wallclock secs ( 0.00 usr +  0.00 sys =  0.00 CPU)

Computing for matrix 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
-1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1
-1 -1 1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 1 1
-1 -1 -1 -1 1 1 1 1 -1 -1 -1 -1 1 1 1 1
-1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1

TropLi:  1 wallclock secs ( 0.96 usr +  0.02 sys =  0.98 CPU)

Computing for matrix 
1 0 0 0 0 1 0 0
0 1 0 0 0 0 -1 0
0 0 1 0 0 -1 0 1
0 0 0 1 0 0 1 -1
0 0 0 0 1 0 0 -1

TropLi:  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)

Computing for matrix 
-1/2 -1/2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
-1/2 0 -1/2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
-1/2 0 0 -1/2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 -1/2 -1/2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0
0 -1/2 0 -1/2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0
0 0 -1/2 -1/2 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
1 -1 0 0 0 0 0 0 0 0 -1 1 0 0 0 0 0 0 0 0
1 0 -1 0 0 0 0 0 0 0 -1 0 1 0 0 0 0 0 0 0
1 0 0 -1 0 0 0 0 0 0 -1 0 0 1 0 0 0 0 0 0
1/2 -1/2 0 0 0 0 0 0 0 0 -1 0 0 0 1 0 0 0 0 0
1/2 0 -1/2 0 0 0 0 0 0 0 -1 0 0 0 0 1 0 0 0 0
1/2 0 0 -1/2 0 0 0 0 0 0 -1 0 0 0 0 0 1 0 0 0
1 -1/2 -1/2 0 0 0 0 0 0 0 -1 0 0 0 0 0 0 1 0 0
1 -1/2 0 -1/2 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 1 0
1 0 -1/2 -1/2 0 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 1

TropLi: 1399 wallclock secs (720.53 usr + 674.65 sys = 1395.18 CPU)

-----------------------------------------------------------------------------------------------

Creating 50 random nx2n integer matrices with entries in 0..10 and computing their bergman fan.

n = 3:
Avg. time orgininal alg.: 0.14
Avg. time TropLi: 0
n = 4:
Avg. time orgininal alg.: 0.56
Avg. time TropLi: 0
n = 5:
Avg. time orgininal alg.: 11.48
Avg. time TropLi: 0.06
n = 6:
Avg. time orgininal alg.: 390.06
Avg. time TropLi: 0.52

Same, but with the matroid passed to TropLi, not the matrix
n = 5:
Avg. time matroid: 0.1
Avg. time linear: 0.06
n = 6:
Avg. time matroid: 1.58
Avg. time linear: 0.44
n = 7:
Avg. time matroid: 28.04
Avg. time linear: 2.46