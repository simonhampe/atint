# This script tests the functionality and the performance of the rincon bergman algorithm

use application "common";
use application "atint";
use application "matroid";
use Benchmark qw(:all);

#First we intialize
my $m = new Matrix<Rational>([[1,-1,0,0],[0,0,1,-1]]);
atint::bergman_fan_linear($m);
atint::tropical_m0n(5);

my $t0;
my $t1;
my @a;
my $I;

#Now we compare the first few M_n's
#for(my $n = 5; $n <= 9; $n++) {
#    $t0 = Benchmark->new;
#    atint::tropical_m0n($n);
#    $t1 = Benchmark->new;
#    print "m0n: ", timestr(timediff($t1,$t0)),"\n";
#    @a = atint::spanning_complete($n-1);
#    $I = new IncidenceMatrix(@a);
#    $t0 = Benchmark->new;
#    atint::computeBergmanFan(binomial($n,2),$I,0,new Matrix<Rational>());
#    $t1 = Benchmark->new;
#    print "rincon: ", timestr(timediff($t1,$t0)),"\n";
#}

my $A1 = transpose(polytope::cube(3)->VERTICES);
my $A2 = transpose(polytope::cube(4)->VERTICES);
my $A3 = (unit_matrix<Rational>(5)) | new Matrix<Rational>([[1,0,0],[0,-1,0],[-1,0,1],[0,1,-1],[0,0,-1]]);
my $A4 = new Matrix<Rational>([[0 ,2 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,0],
[0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,0 ,1],
[0 ,0 ,0 ,2, 0 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,1],
[1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0],
[0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1, 1 ,1 ,1 ,1 ,1 ,1]]);
  $A4 = null_space($A4);

for(my $i = 1; $i <= 3; $i++) {
  my $m;
  if($i == 1) { $m = $A1;}
  if($i == 2) { $m = $A2;}
  if($i == 3) { $m = $A3;}
  if($i == 4) { $m = $A4;}
  print "Computing for matrix \n",$m,"\n";
  $t0 = Benchmark->new;
  my $f = atint::bergman_fan_linear($m);
  $t1 = Benchmark->new;
  print "Has ", $f->RAYS->rows, " rays and ", $f->MAXIMAL_CONES->rows, " maximal cones\n";
  print "Computation took ", timestr(timediff($t1,$t0)),"\n";

  @a = @{atint::computeMatrixBases($m)};
  $I = new IncidenceMatrix(@a);
  my $mat = new matroid::Matroid(N_ELEMENTS=>($m->cols()), BASES=>\@a);

  #$t0 = Benchmark->new;
  #atint::bergman_fan_matroid($mat);
  #$t1 = Benchmark->new;
  #print "Computing as matroid took ", timestr(timediff($t1,$t0)),"\n";

  #$t0 = Benchmark->new;
  #atint::measure1($I,$m);
  #$t1 = Benchmark->new;
  #print "Fk-computation took ", timestr(timediff($t1,$t0)),"\n";
}