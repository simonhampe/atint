# This script tests the functionality and the performance of the rincon bergman algorithm

use application "common";
use application "atint";
use application "matroid";
use Benchmark qw(:all);

#First we intialize
my $m = new Matrix<Rational>([[1,-1,0,0],[0,0,1,-1]]);
atint::bergman_fan_linear($m);
atint::tropical_m0n(5);

my $t0;
my $t1;
my @a;
my $I;

open (RESULT, ">bergmantesting4.txt");

print "Comparing M_0,n computation\n";
print RESULT "Matroid on complete graph on n vertices:\n";

#Now we compare the first few M_n's
# for(my $n = 4; $n <= 6; $n++) {
#     my $m = $n-1;
#     print RESULT "n = $m:";
#     @a = atint::spanning_complete($m);
#     my $mat = new matroid::Matroid(N_ELEMENTS=>binomial($m,2),BASES=>\@a);  
#     $t0 = Benchmark->new;
#     atint::bergman_fan($mat);  
#     $t1 = Benchmark->new;
#     print RESULT "Original algorithm: ", timestr(timediff($t1,$t0)),"\n";
# #     $t0 = Benchmark->new;
# #     atint::tropical_m0n($n);
# #     $t1 = Benchmark->new;
# #     print "m0$n: ", timestr(timediff($t1,$t0)),"\n";
# #     print RESULT "Combinatorial: ", timestr(timediff($t1,$t0)),"\n";
# #     @a = atint::spanning_complete($n-1);
# #     $I = new IncidenceMatrix(@a);
# #     $t0 = Benchmark->new;
# #     atint::computeBergmanFan(binomial($n,2),$I,0,new Matrix<Rational>());
# #     $t1 = Benchmark->new;
# #     print "rincon: ", timestr(timediff($t1,$t0)),"\n";
# #     print RESULT "TropLi: ", timestr(timediff($t1,$t0)),"\n";
# }
# 
# print "\nComputing L^n_k's:\n";
# print RESULT "\n\nUniform matroid U_k,n:\n";
# 
# for(my $n = 2; $n <= 10; $n++) {
#   for(my $k = 1; $k < $n; $k++) {
#     my $m = $n+1; my $l = $k+1;
#     print RESULT "n = $m, k = $l:\n";
#     my $mat = matroid::uniform_matroid($k+1,$n+1);
#     $t0 = Benchmark->new;
#     atint::bergman_fan($mat);
#     $t1 = Benchmark->new;
#     print "L$n,$k: ", timestr(timediff($t1,$t0)),"\n";	
#     print RESULT "Original algorithm: ", timestr(timediff($t1,$t0)),"\n";	
#     $t0 = Benchmark->new;
#     atint::bergman_fan_matroid($mat);
#     $t1 = Benchmark->new;
#     print "Rincon: ", timestr(timediff($t1,$t0)),"\n";
#     print RESULT "TropLi: ", timestr(timediff($t1,$t0)),"\n";		
#   }
# }

# print "\nComputing examples from paper:\n";
# print RESULT "\n\nComputing examples from paper:\n";
# 
# my $A1 = transpose(polytope::cube(3)->VERTICES);
# my $A2 = transpose(polytope::cube(4)->VERTICES);
# my $A3 = (unit_matrix<Rational>(5)) | new Matrix<Rational>([[1,0,0],[0,-1,0],[-1,0,1],[0,1,-1],[0,0,-1]]);
# my $A4 = new Matrix<Rational>([[0 ,2 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,0 ,1 ,1 ,0],
# [0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,0 ,1 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,0 ,1],
# [0 ,0 ,0 ,2, 0 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,2 ,0 ,0 ,1 ,0 ,1 ,1],
# [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0],
# [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,1 ,1 ,1, 1 ,1 ,1 ,1 ,1 ,1]]);
#   $A4 = null_space($A4);
# 
# for(my $i = 1; $i <= 4; $i++) {
#   my $m;
#   if($i == 1) { $m = $A1;}
#   if($i == 2) { $m = $A2;}
#   if($i == 3) { $m = $A3;}
#   if($i == 4) { $m = $A4;}
#   print "Computing for matrix \n",$m,"\n";
#   print RESULT "Computing for matrix \n",$m,"\n";
#   $t0 = Benchmark->new;
#   my $f = atint::bergman_fan_linear($m);
#   $t1 = Benchmark->new;
#   print "Has ", $f->RAYS->rows, " rays and ", $f->MAXIMAL_CONES->rows, " maximal cones\n";
#   print "Computation took ", timestr(timediff($t1,$t0)),"\n";
#   print RESULT "TropLi: ", timestr(timediff($t1,$t0)),"\n";
# 
#   #@a = @{atint::computeMatrixBases($m)};
#   #$I = new IncidenceMatrix(@a);
#   #my $mat = new matroid::Matroid(N_ELEMENTS=>($m->cols()), BASES=>\@a);
# 
#   #$t0 = Benchmark->new;
#   #atint::bergman_fan_matroid($mat);
#   #$t1 = Benchmark->new;
#   #print "Computing as matroid took ", timestr(timediff($t1,$t0)),"\n";
# 
#   #$t0 = Benchmark->new;
#   #atint::measure1($I,$m);
#   #$t1 = Benchmark->new;
#   #print "Fk-computation took ", timestr(timediff($t1,$t0)),"\n";
# }

print "\n\nComputing linear matroids of random nx2n integer matrices:\n";

for(my $n = 5; $n <= 7; $n++) {
  print RESULT "n = $n:\n";
  my $sumorig = 0;
  my $sumrincon = 0;
  for(my $k = 1; $k <= 50; $k++) {
    print "Computing bergman fan $k of 50...";
    my $mx = new Matrix<Rational>($n,2*$n);
    my $entries = atint::randomInteger(new Integer(10), new Integer($mx->rows() * $mx->cols()));
    for(my $r = 0; $r < $mx->rows(); $r++) {
      for(my $c = 0; $c < $mx->cols(); $c++) {
	$mx->row($r)->[$c] = $entries->[$c + $r * $mx->cols()];
      }
    }
    @a = @{atint::computeMatrixBases($mx)};
    my $mat = new matroid::Matroid(N_ELEMENTS=>2*$n,BASES=>\@a);
    $t0 = Benchmark->new;
    atint::bergman_fan_linear($mx);
    $t1 = Benchmark->new;
    $sumrincon += (timediff($t1,$t0)->[0]);

    $t0 = Benchmark->new;
    atint::bergman_fan_matroid($mat);
    $t1 = Benchmark->new;
    $sumorig += (timediff($t1,$t0)->[0]);
    print "Done.\n";
  }
  print RESULT "Avg. time linear: ", ($sumorig/50),"\n";
  print RESULT "Avg. time matroid: ", ($sumrincon / 50),"\n";
}

close(RESULT);