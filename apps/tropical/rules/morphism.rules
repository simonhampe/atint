########################################################################
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor,
#  Boston, MA  02110-1301, USA.
#  
#  ---
#  Copyright (C) 2011-2015, Simon Hampe <simon.hampe@googlemail.com>
#
#
#  Defines properties and rules for Morphism 
########################################################################

object Morphism {

	#FIXME: Uncomment when the functions work.
	#use overload('*' => 'mult','""' => 'to_string', 'bool' => 'bool', '+' => 'sum','-' => 'minus','neg'=>'neg');

	# @category Defining morphisms and functions
	# This property describes the domain of the morphism. I.e. the morphism is
	# defined on this complex and is locally affine integral linear. 
	property DOMAIN : Cycle<Addition>;

	# @category Defining morphisms and functions 
	# The vector at row i describes the function value of vertex [[DOMAIN]]->SEPARATED_VERTICES->row(i). 
	# (In tropical homogenous coordinates, but without leading coordinate).
	# More precisely, if the corresponding vertex is not a far ray, it describes its function value. 
	# If it is a directional ray, it describes the slope on that ray.
	property VERTEX_VALUES : Matrix<Rational>;

	# @category Defining morphisms and functions
	# The vector in row i describes the function value (slope) of [[DOMAIN]]->LINEALITY_SPACE->row(i)
	property LINEALITY_VALUES : Matrix<Rational>; 

	# @category Defining morphisms and functions
	# If the morphism is a global affine linear map x |-> Ax+v, then this contains the matrix A.
	# Note that this must be well-defined on tropical projective coordinates, so the sum of the columns of A
	# must be a multiple of the (1,..,1)-vector.
	# If [[TRANSLATE]] is set, but this property is not set, then it is the identity by default.
	property MATRIX : Matrix<Rational>;

	# @category Defining morphisms and functions
	# If the morphism is a global affine linear map x |-> Ax+v, then this contains the translation vector 
	# v. If [[MATRIX]] is set, but this property is not set, then it is the zero vector by default.
	property TRANSLATE : Vector<Rational>;


	### RULES ###################################

	rule MATRIX : TRANSLATE {
		$this->MATRIX = unit_matrix($this->TRANSLATE->dim());
	}

	rule TRANSLATE : MATRIX {
		$this->TRANSLATE = zero_vector<Rational>($this->MATRIX->rows());
	}

	rule DOMAIN : MATRIX, TRANSLATE {
		computeDomainFromMatrix($this);
	}
	precondition : MATRIX, TRANSLATE {
		$this->MATRIX->rows() == $this->TRANSLATE->dim() or
			die "Matrix and vector dimensions do not match.";
	}

	rule VERTEX_VALUES, LINEALITY_VALUES : MATRIX, TRANSLATE, DOMAIN {
		computeValuesFromMatrix($this);
	}
	precondition : MATRIX, TRANSLATE, DOMAIN {
		($this->DOMAIN->AMBIENT_DIM == $this->MATRIX->cols() and $this->MATRIX->rows() == $this->TRANSLATE->dim())
			or die "Dimensions don't match.";
	}

	#FIXME Add convenience functions for affine description.
}
