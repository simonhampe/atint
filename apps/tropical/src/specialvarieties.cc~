#include "polymake/client.h"
#include "polymake/tropical/LoggingPrinter.h"
#include "polymake/PowerSet.h"
#include "polymake/Set.h"
#include "polymake/Matrix.h"
#include "polymake/Vector.h"
#include "polymake/Rational.h"
#include "polymake/Array.h"


namespace polymake { namespace tropical {

    using namespace atint::donotlog;
    
    //Documentation: see specialvarieties.h
    perl::Object tropical_lnk(const int n, const int k) {
      
      //Ensure that dimensions match
      if(k > n) {
	  throw std::runtime_error("Error creating L^n_k: Fan dimension is larger than ambient dimension");
      }
      if(k < 0 || n < 0) {
	  throw std::runtime_error("Error creating L^n_k: No negative dimensions allowed");
      }
      if(k == 0) {
	  perl::Object result("fan::PolyhedralFan");
	  Set<int> nullset;
	    nullset = nullset + 0;
	  Array<Set<int> > nullarray(1);
	    nullarray[0] = nullset;
	  Matrix<Rational> rm(1,n);
	  result.take("RAYS") << rm; 
	  result.take("MAXIMAL_CONES") << nullarray;
	  result.take("USES_HOMOGENEOUS_C") << false;
	  return result;
      }
      
      //Create rays
      Matrix<Rational> rayMatrix(0,n);
      Vector<Rational> e0(n);
      
      for(int i = 1; i <= n; i++) {
	  Vector<Rational> ei(unit_vector<Rational>(n,i-1));
	  rayMatrix = rayMatrix / -ei;
	  e0 = e0 + ei;
      }
      rayMatrix = rayMatrix / e0;
      
      //Create cones
      Set<int> indices;
	for(int i = 0; i <= n; i++) { indices += i;}
      Array<Set<int> >  kSets = pm::Subsets_of_k<Set<int> > ( indices,k );
      
      //Create weights
      Array<int> weights(kSets.size());
      for(int i = 0; i < weights.size(); i++) {
	  weights[i] = 1;
      }
      
      
      
      perl::Object fan("fan::PolyhedralFan");
	fan.take("RAYS") << rayMatrix;
	fan.take("MAXIMAL_CONES") << kSets;
	fan.take("TROPICAL_WEIGHTS") << weights;
	fan.take("USES_HOMOGENEOUS_C") << false;
	
      return fan;
      
    }
    
    UserFunction4perl("# @category Tropical geometry"
		      "# Creates the linear tropical space L^n_k. This tropical fan is defined in the following way: "
		      "# As rays we take -e_i,i=1,...,n, where e_i is the i-th standard basis vector of R^n and "
		      "# e_0 = e_1 + ... + e_n. As maximal cones we take the cones generated by rays {e_i, i in S}, where"
		      "# S runs over all k-element subsets of {0,..,n}."
		      "# @param Int n The ambient dimension of the fan."
		      "# @param Int k The dimension of the fan (should be smaller equal n, otherwise an error is thrown)."
		      "# @return fan::PolyhedralFan A PolyhedralFan object representing L^n_k",
		      &tropical_lnk,"tropical_lnk($,$)");       
    
}
}